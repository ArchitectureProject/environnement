version: '3.8'
services:
  authpostgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: strongPassword
      POSTGRES_USER: admin_user
      POSTGRES_DB: userdb
    ports:
      - "5432:5432"
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=5432" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -d userdb"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  usermicroservice:
    image: gordito/user-microservice
    depends_on:
      authpostgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://authpostgres:5432/userdb
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: strongPassword
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    networks:
      - app-network

  catalogpostgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: strongPassword
      POSTGRES_USER: admin_user
      POSTGRES_DB: catalog
    ports:
      - "5433:5433"
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=5433" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -p 5433 -d catalog"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  catalogmicroservice:
    image: gordito/catalog-microservice
    depends_on:
      catalogpostgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://catalogpostgres:5433/catalog
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: strongPassword
      SERVER_PORT: 8081
      CONF_JWK_URL: http://usermicroservice:8080/public_key
    ports:
      - "8081:8081"
    networks:
      - app-network

  paymentpostgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: strongPassword
      POSTGRES_USER: admin_user
      POSTGRES_DB: payment
    ports:
      - "5434:5434"
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=5434" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -p 5434 -d payment"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  paymentmicroservice:
    image: gordito/payment-microservice
    depends_on:
      paymentpostgres :
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_DATASOURCE_URL: jdbc:postgresql://paymentpostgres:5434/payment
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: strongPassword
      SERVER_PORT: 8082
      CONF_JWK_URL: http://usermicroservice:8080/public_key
      RABBITMQ_EXCHANGE: paymentServiceExchange
      RABBITMQ_ROUTINGKEY: payment.#
      APP_QUEUE_NAME: processedPaymentQueue
    ports:
      - "8082:8082"
    networks:
      - app-network

  paymentservicemockup:
    image: gordito/payment-service-mockup
    depends_on:
      - rabbitmq
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SERVER_PORT: 8083
      RABBITMQ_EXCHANGE: paymentProcessedServiceExchange
      RABBITMQ_ROUTINGKEY: payment.#
      APP_QUEUE_NAME: paymentProcessingQueue
    ports:
      - "8083:8083"
    networks:
      - app-network

  orderpostgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: strongPassword
      POSTGRES_USER: admin_user
      POSTGRES_DB: orders
    ports:
      - "5435:5435"
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=5435" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -p 5435 -d orders"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  ordermicroservice:
    image: gordito/order-microservice
    depends_on:
      orderpostgres:
        condition: service_healthy
      catalogpostgres:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://orderpostgres:5435/orders
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: strongPassword
      SERVER_PORT: 8084
      CONF_JWK_URL: http://usermicroservice:8080/public_key
      CONF_CATALOG_MICROSERVICE_BASE_URL: http://catalogmicroservice:8081
    ports:
      - "8084:8084"
    networks:
      - app-network

  mailsendermicroservice:
    image: gordito/email-microservice
    environment:
      MAIL_PASSWORD: szul gbyq uyau nbcb
      SERVER_PORT: 8085
      CONF_JWK_URL: http://usermicroservice:8080/public_key
    ports:
      - "8085:8085"
    networks:
      - app-network

  bowlingparkpostgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: strongPassword
      POSTGRES_USER: admin_user
      POSTGRES_DB: bowling
    volumes:
      - ./dbscripts/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    ports:
      - "5436:5436"
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=5436" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin_user -p 5436 -d bowling" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  bowlingparkmicroservice:
    image: gordito/bowlingpark-microservice
    depends_on:
      bowlingparkpostgres:
        condition: service_healthy
    ports:
      - "8000:80"
    environment:
      DB_CONNECTION_STRING: "Host=bowlingparkpostgres:5436;Database=bowling;Username=admin_user;Password=strongPassword"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge